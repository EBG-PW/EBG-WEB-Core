<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover"/>
    <meta http-equiv="X-UA-Compatible" content="ie=edge"/>
    <title>EBG - Dashboard</title>
    <!-- Essential JS -->
    <script>
      const lang = <%- JSON.stringify(language) %>
    </script>
    <script src="<%= domain %>/appjs/i18next.js?<%= curentUnixTime %>"></script>
    <!-- CSS files -->
    <link href="<%= domain %>/dist/css/tabler.min.css?<%= curentUnixTime %>" rel="stylesheet"/>
    <link href="<%= domain %>/dist/css/tabler-flags.min.css?<%= curentUnixTime %>" rel="stylesheet"/>
  </head>
  <body>
    <script src="/appjs/format.js"></script>
    <div class="page">
      <!-- Navbar -->
      <%- html_content.navbar %>
      <div class="page-wrapper">
        <!-- Page header -->
        <div class="page-header d-print-none">
          <div class="container-xl">
            <div class="row g-0 align-items-center">
              <div class="col">
                <h2 class="page-title" data-translate="Events.Settings.Title"></h2>
              </div>
              <div class="col-auto">
                <span>
                  <a href="/event/<%= params.id %>" class="btn btn-primary">
                    <!-- Download SVG icon from http://tabler-icons.io/i/arrow-left -->
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M5 12l14 0"></path><path d="M5 12l6 6"></path><path d="M5 12l6 -6"></path></svg>
                    <div data-translate="Button.GoBack"></div>
                  </a>
                </span>
              </div>
          </div>
        </div>
        <!-- Page body -->
        <div class="page-body">
          <div class="container-xl">
            <div class="card">
              <!-- Sidebar Toggle Button for Small Screens -->
              <div class="card-body d-md-none">
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#sidebar-menu" aria-controls="sidebar-menu" aria-expanded="false" aria-label="Toggle navigation">
                  <span class="navbar-toggler-icon"></span>
                </button>
              </div>
              <div class="row g-0">
                <div class="col-12 col-md-3 d-md-block collapse border-end" id="sidebar-menu">
                  <div class="card-body">
                    <div class="list-group list-group-transparent">
                      <a href="/event/<%= params.id %>/settings" class="list-group-item list-group-item-action d-flex align-items-center" data-translate="Events.Settings.Site.General"></a>
                      <a href="/event/<%= params.id %>/settings-announce" class="list-group-item list-group-item-action d-flex align-items-center active" data-translate="Events.Settings.Site.Announce"></a>
                      <a href="/event/<%= params.id %>/settings-oauth" class="list-group-item list-group-item-action d-flex align-items-center" data-translate="Events.Settings.Site.OAuth"></a>
                    </div>
                  </div>
                </div>
                <div class="col d-flex flex-column">
                  <div class="card-body">
                    <h2 class="mb-4" data-translate="Events.Settings.Announce.Headline"></h2>
                    <!-- Description Row-->
                    <div class="row">
                      <div class="col-lg-12">
                        <div class="mb-4">
                          <label class="form-label" data-translate="Events.Settings.Announce.Textfield"></label>
                          <textarea class="form-control" id="EventAnnounce" onchange="handleInputChange(this.id)" data-translate-placeholder="Events.Settings.Announce.Placeholder.Textfield" rows="3"></textarea>
                        </div>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-lg-12">
                        <div id="NewEventErrorLine"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <%- html_content.footer %>
      </div>
      <div class="modal modal-blur fade" id="modal-danger-delete-avatar" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-sm modal-dialog-centered" role="document">
          <div class="modal-content">
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            <div class="modal-status bg-danger"></div>
            <div class="modal-body text-center py-4">
              <!-- Download SVG icon from http://tabler-icons.io/i/alert-triangle -->
              <svg xmlns="http://www.w3.org/2000/svg" class="icon mb-2 text-danger icon-lg" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M10.24 3.957l-8.422 14.06a1.989 1.989 0 0 0 1.7 2.983h16.845a1.989 1.989 0 0 0 1.7 -2.983l-8.423 -14.06a1.989 1.989 0 0 0 -3.4 0z" /><path d="M12 9v4" /><path d="M12 17h.01" /></svg>
              <h3>Are you sure?</h3>
              <div class="text-muted">Do you really want to remove your avatar? What you've done cannot be undone.</div>
            </div>
            <div class="modal-footer">
              <div class="w-100">
                <div class="row">
                  <div class="col"><a href="#" class="btn w-100" data-bs-dismiss="modal">
                      Cancel
                    </a></div>
                  <div class="col"><a href="#" class="btn btn-danger w-100" data-bs-dismiss="modal">
                      Delete
                    </a></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- Libs JS -->
    <!-- Tabler Core -->
    <script src="<%= domain %>/appjs/permission.js?<%= curentUnixTime %>" defer></script>
    <script src="<%= domain %>/appjs/translate.js?<%= curentUnixTime %>"></script>
    <script src="<%= domain %>/dist/js/tabler.min.js?<%= curentUnixTime %>" defer></script>
    <script src="<%= domain %>/appjs/layout.js?<%= curentUnixTime %>"></script>
    <script>
      // Handle changes to all imput fields (VanillaJS)

      const apiEndpoints = {
        "EventName": {
          "endpoint": "/api/v1/event/<%= params.id %>/name",
          "method": "POST",
          "field": "name",
          "value": "raw"
        },
        "EventDescription": {
          "endpoint": "/api/v1/event/<%= params.id %>/description",
          "method": "POST",
          "field": "description",
          "value": "raw"
        },
        "EventLocation": {
          "endpoint": "/api/v1/event/<%= params.id %>/location",
          "method": "POST",
          "field": "location",
          "value": "raw"
        },
        "EventVisibility": {
          "endpoint": "/api/v1/event/<%= params.id %>/visibility",
          "method": "POST",
          "field": "visibility",
          "value": "raw"
        },
        "EventDateApply": {
          "endpoint": "/api/v1/event/<%= params.id %>/dateapply",
          "method": "POST",
          "field": "dateApply",
          "value": "raw"
        },
        "EventDateStart": {
          "endpoint": "/api/v1/event/<%= params.id %>/datestart",
          "method": "POST",
          "field": "dateStart",
          "value": "raw"
        },
        "EventDateEnd": {
          "endpoint": "/api/v1/event/<%= params.id %>/dateend",
          "method": "POST",
          "field": "dateEnd",
          "value": "raw"
        },
        "EventMinGroup": {
          "endpoint": "/api/v1/event/<%= params.id %>/mingroup",
          "method": "POST",
          "field": "minGroup",
          "value": "raw"
        },
      };

      const getSelectedColorValue = () => {
        const colorInputs = document.querySelectorAll('input[name="color"]:checked');
        return colorInputs.length > 0 ? colorInputs[0].value : null;
      }

      const setLoadedColorValue = (color) => {
        const colorInputs = document.querySelectorAll('input[name="color"]');
        colorInputs.forEach((input) => {
          if (input.value === color) {
            input.checked = true;
          }
        });
      }

      const handleInputChange = async (id) => {
        const inputElement = document.getElementById(id);
        let value_send;

        if(apiEndpoints[id].value == "raw") {
          value_send = inputElement.value;
        } else if(apiEndpoints[id].value == "bool") {
          value_send = inputElement.checked;
        }

        const response = await fetch(apiEndpoints[id].endpoint, {
          method: apiEndpoints[id].method,
          headers: {
            "Content-Type": "application/json",

            "Authorization": "Bearer " + localStorage.getItem("token")
          },
          body: JSON.stringify({
            [apiEndpoints[id].field]: value_send
          })
        });

        if (response.ok) {
          inputElement.classList.remove("is-invalid");
          inputElement.classList.add("is-valid");

          setTimeout(() => {
            inputElement.classList.remove("is-valid");
          }, 3000);
        } else {
          inputElement.classList.add("is-invalid");
        }
      }

      handleColorChange = async (color) => {
        const response = await fetch("/api/v1/event/<%= params.id %>/color", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",

            "Authorization": "Bearer " + localStorage.getItem("token")
          },
          body: JSON.stringify({
            color: color
          })
        });

        if (response.ok) {
          const colorInputs = document.querySelectorAll('input[name="color"]');
          colorInputs.forEach((input) => {
            if (input.value === color) {
              input.checked = true;
            }
          });
        }
      }

      // Auto-fill user data (VanillaJS)
      document.addEventListener("DOMContentLoaded", async () => {
        const response = await fetch("/api/v1/event/<%= params.id %>", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",

            "Authorization": "Bearer " + localStorage.getItem("token")
          }
        });

        if(response.status == 200) {
          const data = await response.json();
          setLoadedColorValue(data.color);
          document.getElementById("EventName").value = data.name;
          document.getElementById("EventDescription").value = data.description;
          document.getElementById("EventLocation").value = data.location_address;
          document.getElementById("EventVisibility").value = data.visibility;
          document.getElementById("EventDateApply").value = toDateTimeLocalString(data.date_apply);
          document.getElementById("EventDateStart").value = toDateTimeLocalString(data.date_start);
          document.getElementById("EventDateEnd").value = toDateTimeLocalString(data.date_end);
          document.getElementById("EventMinGroup").value = data.min_group;
        }
      });
    </script>
  </body>
</html>