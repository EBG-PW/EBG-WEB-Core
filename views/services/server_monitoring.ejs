<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>EBG - Dashboard</title>
    <!-- Essential JS -->
    <script>
      const lang = <%- JSON.stringify(language) %>
    </script>
    <script src="<%= domain %>/appjs/i18next.js?<%= curentUnixTime %>"></script>
    <!-- CSS files -->
    <link href="<%= domain %>/dist/css/tabler.min.css?<%= curentUnixTime %>" rel="stylesheet" />
    <link href="<%= domain %>/dist/css/tabler-flags.min.css?<%= curentUnixTime %>" rel="stylesheet" />
  </head>
  <body>
    <script src="/appjs/format.js"></script>
    <div class="page">
      <!-- Navbar -->
      <%- html_content.navbar %>
      <div class="page-wrapper">
        <!-- Page header -->
        <div class="page-header d-print-none">
          <div class="container-xl">
            <div class="row g-2 align-items-center">
              <div class="col">
                <h2 class="page-title" data-translate="SRVMon.Body.Head.Title"></h2>
                <div class="text-muted mt-1" data-translate="SRVMon.Body.Head.SubTitle"></div>
              </div>
              <!-- Page title actions -->
              <div class="col-auto ms-auto d-print-none">
                <div class="d-flex">
                  <div class="me-3">
                    <div class="input-icon">
                      <input type="text" value="" class="form-control" id="PageSearch" onkeypress="debouncedLoadPage()" onchange="loadPage()" data-translate-placeholder="Page.Search" placeholder="" />
                      <span class="input-icon-addon">
                        <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                          <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                          <path d="M10 10m-7 0a7 7 0 1 0 14 0a7 7 0 1 0 -14 0" />
                          <path d="M21 21l-6 -6" />
                        </svg>
                      </span>
                    </div>
                  </div>
                  <a class="btn btn-primary" class="btn" data-bs-toggle="modal" data-bs-target="#modal-newmon">
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                      <path d="M12 5l0 14" />
                      <path d="M5 12l14 0" />
                    </svg>
                    <div data-translate="SRVMon.Body.Head.AddButton"></div>
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
        <!-- Page body -->
        <div class="page-body">
          <div class="container-xl">
            <div class="row row-cards row-deck" id="srvmon-container"></div>
            <div id="paginationContainer"></div>
          </div>
        </div>
        <%- html_content.footer %>
      </div>
    </div>
    <div class="modal modal-blur fade" id="modal-newmon" tabindex="-1" role="dialog" aria-hidden="true">
      <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" data-translate="SRVMon.Modal.Newmon.Title"></h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="row">
              <div class="col-lg-6">
                <div class="mb-4">
                  <label class="form-label" data-translate="SRVMon.Modal.Newmon.Hostname"></label>
                  <input type="text" id="NewSRVMonHostname" data-translate-placeholder="SRVMon.Modal.Newmon.Placeholder.Hostname" class="form-control" />
                </div>
              </div>
              <div class="col-lg-6">
                <div class="mb-4">
                  <label class="form-label" data-translate="SRVMon.Modal.Newmon.IPAddress"></label>
                  <input type="text" id="NewSRVMonIPAddr" data-translate-placeholder="SRVMon.Modal.Newmon.Placeholder.IPAddress" class="form-control" />
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-lg-7">
                <label class="form-label" data-translate="SRVMon.Modal.Newmon.Color"></label>
                <div class="row g-2">
                  <div class="col-auto">
                    <label class="form-colorinput">
                      <input name="color" type="radio" value="dark" class="form-colorinput-input" />
                      <span class="form-colorinput-color bg-dark"></span>
                    </label>
                  </div>
                  <div class="col-auto">
                    <label class="form-colorinput form-colorinput-light">
                      <input name="color" type="radio" value="white" class="form-colorinput-input" checked />
                      <span class="form-colorinput-color bg-white"></span>
                    </label>
                  </div>
                  <div class="col-auto">
                    <label class="form-colorinput">
                      <input name="color" type="radio" value="blue" class="form-colorinput-input" />
                      <span class="form-colorinput-color bg-blue"></span>
                    </label>
                  </div>
                  <div class="col-auto">
                    <label class="form-colorinput">
                      <input name="color" type="radio" value="azure" class="form-colorinput-input" />
                      <span class="form-colorinput-color bg-azure"></span>
                    </label>
                  </div>
                  <div class="col-auto">
                    <label class="form-colorinput">
                      <input name="color" type="radio" value="indigo" class="form-colorinput-input" />
                      <span class="form-colorinput-color bg-indigo"></span>
                    </label>
                  </div>
                  <div class="col-auto">
                    <label class="form-colorinput">
                      <input name="color" type="radio" value="purple" class="form-colorinput-input" />
                      <span class="form-colorinput-color bg-purple"></span>
                    </label>
                  </div>
                  <div class="col-auto">
                    <label class="form-colorinput">
                      <input name="color" type="radio" value="pink" class="form-colorinput-input" />
                      <span class="form-colorinput-color bg-pink"></span>
                    </label>
                  </div>
                  <div class="col-auto">
                    <label class="form-colorinput">
                      <input name="color" type="radio" value="red" class="form-colorinput-input" />
                      <span class="form-colorinput-color bg-red"></span>
                    </label>
                  </div>
                  <div class="col-auto">
                    <label class="form-colorinput">
                      <input name="color" type="radio" value="orange" class="form-colorinput-input" />
                      <span class="form-colorinput-color bg-orange"></span>
                    </label>
                  </div>
                  <div class="col-auto">
                    <label class="form-colorinput">
                      <input name="color" type="radio" value="yellow" class="form-colorinput-input" />
                      <span class="form-colorinput-color bg-yellow"></span>
                    </label>
                  </div>
                  <div class="col-auto">
                    <label class="form-colorinput">
                      <input name="color" type="radio" value="lime" class="form-colorinput-input" />
                      <span class="form-colorinput-color bg-lime"></span>
                    </label>
                  </div>
                </div>
              </div>
              <div class="col-lg-5">
                <div class="mb-5">
                  <label class="form-label" data-translate="SRVMon.Modal.Newmon.Visibility"></label>
                  <select class="form-select" id="NewSRVMonVisibility">
                    <option value="1" data-translate="SRVMon.Modal.Newmon.Visibility_Open"></option>
                    <option value="0" data-translate="SRVMon.Modal.Newmon.Visibility_Hidden" selected></option>
                  </select>
                </div>
              </div>
            </div>
            <div class="row mb-3">
              <label class="form-label" data-translate="SRVMon.Modal.Newmon.Graphs"></label>
              <div class="col">
                <label class="form-check">
                  <input class="form-check-input" id="CHART:CPU:USAGE" type="checkbox" />
                  <span class="form-check-label" data-translate="SRVMon.Modal.Newmon.CPUUsage"></span>
                  <span class="form-check-description" data-translate="SRVMon.Modal.Newmon.Description.CPUUsage"></span>
                </label>
                <label class="form-check">
                  <input class="form-check-input" id="CHART:CPU:AVGFREQ" type="checkbox" />
                  <span class="form-check-label" data-translate="SRVMon.Modal.Newmon.CPUAVGFreq"></span>
                  <span class="form-check-description" data-translate="SRVMon.Modal.Newmon.Description.CPUAVGFreq"></span>
                </label>
                <label class="form-check">
                  <input class="form-check-input" id="CHART:CPU:TEMP" type="checkbox" />
                  <span class="form-check-label" data-translate="SRVMon.Modal.Newmon.CPUTemp"></span>
                  <span class="form-check-description" data-translate="SRVMon.Modal.Newmon.Description.CPUTemp"></span>
                </label>
                <label class="form-check">
                  <input class="form-check-input" id="CHART:MEM:USAGE" type="checkbox" />
                  <span class="form-check-label" data-translate="SRVMon.Modal.Newmon.MEMUsage"></span>
                  <span class="form-check-description" data-translate="SRVMon.Modal.Newmon.Description.MEMUsage"></span>
                </label>
                <label class="form-check">
                  <input class="form-check-input" id="CHART:MEM:SWAP" type="checkbox" />
                  <span class="form-check-label" data-translate="SRVMon.Modal.Newmon.MEMSwap"></span>
                  <span class="form-check-description" data-translate="SRVMon.Modal.Newmon.Description.MEMSwap"></span>
                </label>
                <label class="form-check">
                  <input class="form-check-input" id="CHART:SYS:POWER" type="checkbox" />
                  <span class="form-check-label" data-translate="SRVMon.Modal.Newmon.SYSPower"></span>
                  <span class="form-check-description" data-translate="SRVMon.Modal.Newmon.Description.SYSPower"></span>
                </label>
              </div>
              <div class="col">
                <label class="form-check">
                  <input class="form-check-input" id="CHART:DISK:USAGE" type="checkbox" />
                  <span class="form-check-label" data-translate="SRVMon.Modal.Newmon.DISKUsage"></span>
                  <span class="form-check-description" data-translate="SRVMon.Modal.Newmon.Description.DISKUsage"></span>
                </label>
                <label class="form-check">
                  <input class="form-check-input" id="CHART:DISK:IO" type="checkbox" />
                  <span class="form-check-label" data-translate="SRVMon.Modal.Newmon.DISKIo"></span>
                  <span class="form-check-description" data-translate="SRVMon.Modal.Newmon.Description.DISKIo"></span>
                </label>
                <label class="form-check">
                  <input class="form-check-input" id="CHART:DISK:OPS" type="checkbox" />
                  <span class="form-check-label" data-translate="SRVMon.Modal.Newmon.DISKOps"></span>
                  <span class="form-check-description" data-translate="SRVMon.Modal.Newmon.Description.DISKOps"></span>
                </label>
                <label class="form-check">
                  <input class="form-check-input" id="CHART:NET:PACKETS" type="checkbox" />
                  <span class="form-check-label" data-translate="SRVMon.Modal.Newmon.NETPackets"></span>
                  <span class="form-check-description" data-translate="SRVMon.Modal.Newmon.Description.NETPackets"></span>
                </label>
                <label class="form-check">
                  <input class="form-check-input" id="CHART:NET:OCTETS" type="checkbox" />
                  <span class="form-check-label" data-translate="SRVMon.Modal.Newmon.NETOctets"></span>
                  <span class="form-check-description" data-translate="SRVMon.Modal.Newmon.Description.NETOctets"></span>
                </label>
              </div>
            </div>
            <div class="row">
              <div class="col-lg-6">
                <div class="mb-4">
                  <label class="form-label" data-translate="SRVMon.Modal.Newmon.ChartTime"></label>
                  <input type="text" id="NewSRVMonChartTime" data-translate-placeholder="SRVMon.Modal.Newmon.Placeholder.ChartTime" class="form-control" />
                </div>
              </div>
              <div class="col-lg-6">
                <div class="mb-4">
                  <label class="form-label" data-translate="Payment.Cost.Lable.PerMonth"></label>
                  <div id="CostAmountPerMonth">
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-lg-12">
                <div id="NewEventErrorLine"></div>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <a class="btn btn-link link-secondary" data-bs-dismiss="modal" data-translate="SRVMon.Modal.Newmon.Cancel"></a>
            <a class="btn btn-primary ms-auto" id="NewSRVMonSubmitBtn">
              <!-- Download SVG icon from http://tabler-icons.io/i/plus -->
              <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M12 5l0 14" />
                <path d="M5 12l14 0" />
              </svg>
              <span data-translate="SRVMon.Modal.Newmon.AddNew"></span>
            </a>
          </div>
        </div>
      </div>
    </div>
    <!-- Libs JS -->
    <!-- Tabler Core -->
    <script src="<%= domain %>/appjs/permission.js?<%= curentUnixTime %>" defer></script>
    <script src="<%= domain %>/appjs/translate.js?<%= curentUnixTime %>"></script>
    <script src="<%= domain %>/dist/js/tabler.min.js?<%= curentUnixTime %>" defer></script>
    <script src="<%= domain %>/appjs/layout.js?<%= curentUnixTime %>"></script>
    <script src="<%= domain %>/appjs/convertion.js?<%= curentUnixTime %>"></script>
    <script>
      // Load Server Monitors and display them
      const loadPageContent = (page, size) => {
        const search = document.getElementById("PageSearch").value;
        fetch(`/api/v1/srvmon?page=${page}&size=${size}&search=${search}`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: "Bearer " + localStorage.getItem("token"),
          },
        }).then(async (response) => {
          const response_json = await response.json();
          if (response.status == 200) {
            const srvmonContainer = document.getElementById("srvmon-container");
            srvmonContainer.innerHTML = "";
            response_json.forEach(async (m) => {
              if ("overview" in m) {
                // Monitor Online
                const { individual, metrics } = await gzipDecompress(m.overview.data);
                srvmonContainer.innerHTML += `<div class="col-md-6 col-lg-4">
                <div class="card-tabs">
                  <ul class="nav nav-tabs" role="tablist">
                    <li class="nav-item" role="presentation"><a href="#tab-top-1" class="nav-link active" data-bs-toggle="tab" aria-selected="true" role="tab">${i18next.t("SRVMon.Cards.Online.1")}</a></li>
                    <li class="nav-item" role="presentation"><a href="#tab-top-2" class="nav-link" data-bs-toggle="tab" aria-selected="false" role="tab">${i18next.t("SRVMon.Cards.Online.2")}</a></li>
                    <li class="nav-item" role="presentation"><a href="#tab-top-3" class="nav-link" data-bs-toggle="tab" aria-selected="false" role="tab">${i18next.t("SRVMon.Cards.Online.3")}</a></li>
                    <li class="nav-item" role="presentation"><a href="#tab-top-4" class="nav-link" data-bs-toggle="tab" aria-selected="false" role="tab">${i18next.t("SRVMon.Cards.Online.4")}</a></li>
                    <li class="nav-item" role="presentation"><a href="#tab-top-5" class="nav-link" data-bs-toggle="tab" aria-selected="false" role="tab">${i18next.t("SRVMon.Cards.Online.5")}</a></li>
                  </ul>
                  <div class="tab-content">
                    <div id="tab-top-1" class="card tab-pane active show" role="tabpanel">
                    <div class="card-body">
                      <div class="card-title">${i18next.t("SRVMon.Cards.Summary", { hostname: m.hostname, ip_address: m.ip_address })}</div>
                      <div class="text-secondary">
                        <ul>
                          <!-- CPU Overview -->
                          <li>
                            <strong>${i18next.t("SRVMon.Cards.CPU.TotalUsage")}</strong>: 
                            ${(100 - metrics["system.cpu.idle"].value).toFixed(2)} % (${metrics["sensors.chip_sensor_temperature.input"]?.value.toFixed(0)}°C)${metrics["sensors.chip_sensor_power_average.average"] ? ` ${metrics["sensors.chip_sensor_power_average.average"].value.toFixed(0)} W` : ""}
                          </li>
                          <!-- System Load -->
                          <li>
                            <strong>${i18next.t("SRVMon.Cards.LOAD.TotalUsage")}</strong>: 
                            ${metrics["system.load.load1"].value.toFixed(2)}/${metrics["system.load.load5"].value.toFixed(2)}/${metrics["system.load.load15"].value.toFixed(2)}
                          </li>
                          <!-- Memory Overview -->
                          <li>
                            <strong>${i18next.t("SRVMon.Cards.MEM.TotalUsage")}</strong>: 
                            ${ConvertComputerSpaceUnits(metrics["system.ram.used"], "GiB").value.toFixed(2)} ${ConvertComputerSpaceUnits(metrics["system.ram.used"], "GiB").units} / 
                            ${AddValuesWithUnits([metrics["system.ram.buffers"], metrics["system.ram.cached"], metrics["system.ram.free"], metrics["system.ram.used"]], "GiB").value.toFixed(2)} ${ConvertComputerSpaceUnits(metrics["system.ram.used"], "GiB").units}
                          </li>
                          <!-- Disk Usage -->
                          <li>
                            <strong>${i18next.t("SRVMon.Cards.DISK.TotalUsage")}</strong>: 
                            ${ConvertComputerSpaceUnits(metrics["disk.space.used"], "TiB").value.toFixed(2)} ${ConvertComputerSpaceUnits(metrics["disk.space.used"], "TiB").units} /
                            ${AddValuesWithUnits([metrics["disk.space.avail"], metrics["disk.space.used"], metrics["disk.space.reserved_for_root"]], "TiB").value.toFixed(2)} ${ConvertComputerSpaceUnits(metrics["disk.space.avail"], "TiB").units}
                          </li>
                          <li>
                            <strong>${i18next.t("SRVMon.Cards.DISK.Status")}</strong>: 
                            ${Object.values(individual.disk).every((disk) => disk["device_smart_status.ok"] === 1) ? "✅" : "❌"}
                            ${Math.min(...Object.values(individual.disk).map((disk) => disk.temperature))}°C / 
                            ${(Object.values(individual.disk).reduce((sum, disk) => sum + disk.temperature, 0) / Object.values(individual.disk).length).toFixed(0)}°C / 
                            ${Math.max(...Object.values(individual.disk).map((disk) => disk.temperature))}°C
                          </li>
                        </ul>
                        </div>
                      </div>
                    </div>
                    <div id="tab-top-2" class="card tab-pane" role="tabpanel">
                      <div class="card-body">
                        <div class="card-title">${i18next.t("SRVMon.Cards.Summary", { hostname: m.hostname, ip_address: m.ip_address })}</div>
                        <div class="text-secondary">
                          <ul>
                            <li>
                            <strong>${i18next.t("SRVMon.Cards.CPU.Freq")}</strong>: ${metrics["cpufreq.cpufreq"].value.toFixed(2)} MHz
                          </li>
                          <li>
                            <strong>${i18next.t("SRVMon.Cards.Total")}</strong>: ${(100 - metrics["system.cpu.idle"].value).toFixed(2)} %
                          </li>
                          <li>
                            <strong>${i18next.t("SRVMon.Cards.CPU.System")}</strong>: ${metrics["system.cpu.system"].value.toFixed(2)} %
                          </li>
                          <li>
                            <strong>${i18next.t("SRVMon.Cards.CPU.User")}</strong>: ${metrics["system.cpu.user"].value.toFixed(2)} %
                            </li>
                          <li>
                            <strong>${i18next.t("SRVMon.Cards.CPU.Steal")}</strong>: ${metrics["system.cpu.steal"].value.toFixed(2)} %
                            </li>
                          <li>
                            <strong>${i18next.t("SRVMon.Cards.CPU.Softirq")}</strong>: ${metrics["system.cpu.softirq"].value.toFixed(2)} %
                            </li>
                          </ul>
                        </div>
                      </div>
                    </div>
                    <div id="tab-top-3" class="card tab-pane" role="tabpanel">
                      <div class="card-body">
                        <div class="card-title">${i18next.t("SRVMon.Cards.Summary", { hostname: m.hostname, ip_address: m.ip_address })}</div>
                        <div class="text-secondary">
                          <ul>
                            <li>
                              <strong>${i18next.t("SRVMon.Cards.Total")}</strong>: 
                              ${ConvertComputerSpaceUnits(metrics["system.ram.used"], "GiB").value.toFixed(2)} ${ConvertComputerSpaceUnits(metrics["system.ram.used"], "GiB").units} / 
                              ${AddValuesWithUnits([metrics["system.ram.buffers"], metrics["system.ram.cached"], metrics["system.ram.free"], metrics["system.ram.used"]], "GiB").value.toFixed(2)} ${ConvertComputerSpaceUnits(metrics["system.ram.used"], "GiB").units}
                            </li>
                            <li>
                              <strong>${i18next.t("SRVMon.Cards.MEM.Buffer")}</strong>: ${ConvertComputerSpaceUnits(metrics["system.ram.buffers"], "GiB").value.toFixed(2)} ${ConvertComputerSpaceUnits(metrics["system.ram.buffers"], "GiB").units}
                              </li>
                            <li>
                              <strong>${i18next.t("SRVMon.Cards.MEM.Cached")}</strong>: ${ConvertComputerSpaceUnits(metrics["system.ram.cached"], "GiB").value.toFixed(2)} ${ConvertComputerSpaceUnits(metrics["system.ram.cached"], "GiB").units}
                              </li>
                            <li>
                              <strong>${i18next.t("SRVMon.Cards.MEM.Free")}</strong>: ${ConvertComputerSpaceUnits(metrics["system.ram.free"], "GiB").value.toFixed(2)} ${ConvertComputerSpaceUnits(metrics["system.ram.free"], "GiB").units}
                            </li>
                            <li>
                              <strong>${i18next.t("SRVMon.Cards.MEM.Used")}</strong>: ${ConvertComputerSpaceUnits(metrics["system.ram.used"], "GiB").value.toFixed(2)} ${ConvertComputerSpaceUnits(metrics["system.ram.used"], "GiB").units}
                            </li>
                            <li>
                              <strong>${i18next.t("SRVMon.Cards.MEM.SwapUsed")}</strong>: ${ConvertComputerSpaceUnits(metrics["mem.swap.used"], "GiB").value.toFixed(2)} / ${AddValuesWithUnits([metrics["mem.swap.used"], metrics["mem.swap.free"]], "GiB").value.toFixed(2)} ${ConvertComputerSpaceUnits(metrics["mem.swap.used"], "GiB").units}
                            </li>
                          </ul>
                        </div>
                      </div>
                    </div>
                    <div id="tab-top-4" class="card tab-pane" role="tabpanel">
                      <div class="card-body">
                        <div class="card-title">${i18next.t("SRVMon.Cards.Summary", { hostname: m.hostname, ip_address: m.ip_address })}</div>
                        <div class="text-secondary">
                          <ul>
                            <li>
                              <strong>${i18next.t("SRVMon.Cards.NET.PacketsReceived")}</strong>: ${ConvertComputerSpaceUnits(metrics["net.packets.received"], "Kpackets/s").value.toFixed(3)} ${ConvertComputerSpaceUnits(metrics["net.packets.received"], "Kpackets/s").units} 
                            </li>
                            <li>
                              <strong>${i18next.t("SRVMon.Cards.NET.PacketsSent")}</strong>: ${ConvertComputerSpaceUnits(metrics["net.packets.sent"], "Kpackets/s").value.toFixed(3)} ${ConvertComputerSpaceUnits(metrics["net.packets.sent"], "Kpackets/s").units} 
                            </li>
                            <li>
                              <strong>${i18next.t("SRVMon.Cards.NET.OctetsSent")}</strong>: ${ConvertComputerSpaceUnits(metrics["system.net.InOctets"], "megabits/s").value.toFixed(3)} ${ConvertComputerSpaceUnits(metrics["system.net.InOctets"], "megabits/s").units} 
                            </li>
                            <li>
                              <strong>${i18next.t("SRVMon.Cards.NET.OctetsSent")}</strong>: ${ConvertComputerSpaceUnits(metrics["system.net.OutOctets"], "megabits/s").value.toFixed(3)} ${ConvertComputerSpaceUnits(metrics["system.net.OutOctets"], "megabits/s").units} 
                            </li>
                          </ul>
                        </div>
                      </div>
                    </div>
                    <div id="tab-top-5" class="card tab-pane" role="tabpanel">
                      <div class="card-body">
                        <div class="card-title">${i18next.t("SRVMon.Cards.Summary", { hostname: m.hostname, ip_address: m.ip_address })}</div>
                        <div class="text-secondary">
                          <ul>
                            <li>
                              ${i18next.t("SRVMon.Cards.DISK.IOSpeed", {ReadVal: ConvertComputerSpaceUnits(metrics["disk.io.reads"], "MiB/s").value.toFixed(0), WriteVal: ConvertComputerSpaceUnits(metrics["disk.io.writes"], "MiB/s").value.toFixed(0), Unit: ConvertComputerSpaceUnits(metrics["disk.io.reads"], "MiB/s").units})}
                            </li>
                            <li>
                              ${i18next.t("SRVMon.Cards.DISK.IOOP", {ReadVal: ConvertComputerSpaceUnits(metrics["disk.ops.reads"], "operations/s").value.toFixed(0), WriteVal: ConvertComputerSpaceUnits(metrics["disk.ops.writes"], "operations/s").value.toFixed(0), Unit: ConvertComputerSpaceUnits(metrics["disk.ops.reads"], "operations/s").units})}
                            </li>
                            <li>
                              <strong>${i18next.t("SRVMon.Cards.DISK.TotalUsage")}</strong>: 
                              ${ConvertComputerSpaceUnits(metrics["disk.space.used"], "TiB").value.toFixed(2)} ${ConvertComputerSpaceUnits(metrics["disk.space.used"], "TiB").units} /
                              ${AddValuesWithUnits([metrics["disk.space.avail"], metrics["disk.space.used"], metrics["disk.space.reserved_for_root"]], "TiB").value.toFixed(2)} ${ConvertComputerSpaceUnits(metrics["disk.space.avail"], "TiB").units}
                            </li>
                            <li>
                              <strong>${i18next.t("SRVMon.Cards.DISK.Worst")}</strong>: ${
                                JSON.stringify(
                                  Object.entries(individual.disk)
                                    .sort(([, a], [, b]) => b.error_log - a.error_log)
                                    .slice(0, 3)
                                    .map(([disk, data]) => `${disk}(${data.error_log}) `)
                                ).replace(/[\[\]"]/g, '')
                              }
                            </li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>`;
              } else {
                // Monitor Offline
                srvmonContainer.innerHTML += `<div class="col-md-6 col-lg-4">
                <div class="card bg-danger-lt">
                  <div class="card-status-start bg-danger"></div>
                  <div class="card-body">
                    <h3 class="card-title">${i18next.t("SRVMon.Cards.Offline", { hostname: m.hostname })}</h3>
                    <p class="text-secondary">${i18next.t("SRVMon.Cards.Offline_Body", { hostname: m.hostname, ip_address: m.ip_address })}</p>
                  </div>
                </div>
              </div>`;
              }
            });
          } else {
            // Error
          }
        });
      };

      const loadPage = async () => {
        const search = document.getElementById("PageSearch").value;
        const pagerequest = await fetch(`/api/v1/srvmon/count?search=${search}`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
            Authorization: "Bearer " + localStorage.getItem("token"),
          },
        });

        if (pagerequest.status == 200) {
          const response_json = await pagerequest.json();
          generatePagination(parseInt(response_json, 10), 10, 1, loadPageContent);
        } else {
          // Error
        }
      };

      const chartsBitMasks = {
        "CHART:CPU:USAGE": 1 << 1,
        "CHART:CPU:AVGFREQ": 1 << 2,
        "CHART:CPU:TEMP": 1 << 3,
        "CHART:MEM:USAGE": 1 << 4,
        "CHART:MEM:SWAP": 1 << 5,
        "CHART:DISK:USAGE": 1 << 6,
        "CHART:DISK:IO": 1 << 7,
        "CHART:DISK:OPS": 1 << 8,
        "CHART:NET:PACKETS": 1 << 9,
        "CHART:NET:OCTETS": 1 << 10,
        "CHART:SYS:POWER": 1 << 11,
      };

      // Get selected color
      const getSelectedColorValue = () => {
        const colorInputs = document.querySelectorAll('input[name="color"]:checked');
        return colorInputs.length > 0 ? colorInputs[0].value : null;
      };

      // Get selected chart scope
      const calculateSelectedChartScope = () => {
        let selectedChartScope = 0;

        document.querySelectorAll(".form-check-input").forEach((checkbox) => {
          if (checkbox.checked) {
            const permissionKey = checkbox.id;
            if (chartsBitMasks[permissionKey]) {
              selectedChartScope |= chartsBitMasks[permissionKey];
            }
          }
        });

        return selectedChartScope;
      };

      const keys = {
        hostname: "NewSRVMonHostname",
        ipaddr: "NewSRVMonIPAddr",
        visibility: "NewSRVMonVisibility",
        charttime: "NewSRVMonChartTime",
      };

      // Detekt submit button press
      document.getElementById("NewSRVMonSubmitBtn").addEventListener("click", function () {
        // Get values
        const hostname = document.getElementById(keys.hostname).value;
        const ipaddr = document.getElementById(keys.ipaddr).value;
        const visibility = document.getElementById(keys.visibility).value;
        const charttime = document.getElementById(keys.charttime).value.length < 1 ? 1 : document.getElementById(keys.charttime).value;
        const color = getSelectedColorValue();
        const chartscope = calculateSelectedChartScope();

        fetch("/api/v1/srvmon", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
            Authorization: "Bearer " + localStorage.getItem("token"),
          },
          body: JSON.stringify({
            hostname: hostname,
            ipaddr: ipaddr,
            color: color,
            visibility: visibility,
            charttime: charttime,
            chartscope: chartscope,
          }),
        }).then(async (response) => {
          const response_json = await response.json();
          if (response.status == 200) {
            for (const key in keys) {
              document.getElementById(keys[key]).classList.remove("is-invalid");
            }
            closeModal("modal-newmon");
            loadPage();
          } else {
            if (typeof response_json.reason === "string") {
              document.getElementById("NewEventErrorLine").innerHTML = '<div class="alert alert-danger">' + i18next.t(`Error.${response_json.message}`) + "</div>";
              return;
            }
            const input_name = response_json.reason[0].path[0];
            const input_type = response_json.reason[0].type;
            console.log(input_name, input_type);
            for (const key in keys) {
              console.log(keys[key]);
              document.getElementById(keys[key]).classList.remove("is-invalid");
            }

            document.getElementById("NewEventErrorLine").innerHTML = '<div class="alert alert-danger">' + i18next.t(`Error.Joi.${input_type}`, { field: i18next.t(`Events.Modal.NewEvent.${capitalizeFirstLetter(input_name)}`), limit: response_json.reason[0].context?.limit }) + "</div>";
            document.getElementById(keys[input_name]).classList.add("is-invalid");
          }
        });
      });

      loadPage();
      setInterval(loadPage, 60000);
      const debouncedLoadPage = debounce(loadPage);
    </script>
  </body>
</html>
