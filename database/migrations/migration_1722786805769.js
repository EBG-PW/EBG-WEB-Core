module.exports = {
    "id": 1722786805769,
    "name": "migration_1722786805769.js",
    "date": "2024-08-04T15:53:25.769Z",
    "up_instructions": [
        `CREATE TABLE IF NOT EXISTS users (
            id bigserial PRIMARY KEY,
            puuid UUID NOT NULL UNIQUE DEFAULT uuid_generate_v4(),
            username text UNIQUE,
            email text UNIQUE,
            email_verified TIMESTAMP WITH TIME ZONE,
            password text,
            user_group text,
            first_name text,
            last_name text,
            bio text,
            avatar_url text,
            public boolean DEFAULT false,
            legal TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            twofa_secret text,
            twofa_time TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            twofa_token text,
            time TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP);`,
        `CREATE TABLE IF NOT EXISTS users_settings (
            user_id integer,
            design text,
            language text,
            PRIMARY KEY (user_id),
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE);`,
        `CREATE TABLE IF NOT EXISTS users_addresses (
            user_id integer,
            address text,
            city text,
            state text,
            zip text,
            country text,
            PRIMARY KEY (user_id),
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE);`,
        `CREATE TABLE IF NOT EXISTS users_accounts (
            user_id integer,
            app text,
            account_id text,
            profile_url text,
            PRIMARY KEY (user_id, app),
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE);`,
        `CREATE TABLE IF NOT EXISTS users_permissions (
            user_id integer,
            permission text,
            read boolean,
            write boolean,
            time TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (user_id, permission),
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE);`,
        `CREATE TABLE IF NOT EXISTS users_links (
            user_id integer,
            platform text NOT NULL,
            data_val text NOT NULL,
            PRIMARY KEY (user_id, platform),
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE);`,
        `CREATE TABLE IF NOT EXISTS users_integrations (
            user_id integer,
            platform text NOT NULL,
            unique_remote_id text NOT NULL,
            PRIMARY KEY (user_id, platform),
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE);`,
        `CREATE TABLE IF NOT EXISTS projectactivities (
            id serial,
            puuid UUID NOT NULL UNIQUE DEFAULT uuid_generate_v4(),
            type smallint,
            name text,
            description text,
            avatar_url text,
            color text,
            location_address text,
            date_start TIMESTAMP WITH TIME ZONE,
            date_end TIMESTAMP WITH TIME ZONE,
            date_created TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            date_apply TIMESTAMP WITH TIME ZONE,
            min_group text,
            visibility smallint,
            state smallint,
            creator_user_id integer,
            PRIMARY KEY (id));`,
        `CREATE TABLE IF NOT EXISTS projectactivity_users (
            activity_id integer,
            user_id integer,
            activity_group text,
            notification boolean DEFAULT true,
            has_logged_in boolean DEFAULT false,
            time TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (activity_id, user_id),
            FOREIGN KEY (activity_id) REFERENCES projectactivities(id) ON DELETE CASCADE,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE);`,
        `CREATE TABLE IF NOT EXISTS oauth_apps (
            id bigint PRIMARY KEY,
            name text,
            avatar_url text,
            scope bigint,
            client_id text UNIQUE,
            secret text,
            redirect_url text,
            time TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP);`,
        `CREATE INDEX IF NOT EXISTS idx_oauth_client_id ON oauth_apps (client_id);`,
        `CREATE TABLE IF NOT EXISTS oauth_tokens (
            user_id bigint,
            app_id bigint,
            access_token text,
            time_access_token TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            refresh_token text,
            time_refresh_token TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (user_id, app_id),
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
            FOREIGN KEY (app_id) REFERENCES oauth_apps(id) ON DELETE CASCADE);`,
        `CREATE TABLE IF NOT EXISTS projectactivity_timeline (
            activity_id integer,
            content text,
            time TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (activity_id, time),
            FOREIGN KEY (activity_id) REFERENCES projectactivities(id) ON DELETE CASCADE);`,
        `CREATE TABLE IF NOT EXISTS webtokens (
            user_id integer,
            token text PRIMARY KEY,
            browser text,
            time TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE);`,
        `CREATE TABLE IF NOT EXISTS confirmation_tokens (
            user_id integer,
            type text,
            token text,
            data text,
            time TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (type, token),
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE);`],
    "down_instructions": [
        "DROP TABLE IF EXISTS confirmation_tokens;",
        "DROP TABLE IF EXISTS webtokens;",
        "DROP TABLE IF EXISTS projectactivity_timeline;",
        "DROP TABLE IF EXISTS oauth_tokens;",
        "DROP INDEX IF EXISTS idx_oauth_client_id;",
        "DROP TABLE IF EXISTS oauth_apps;",
        "DROP TABLE IF EXISTS projectactivity_users;",
        "DROP TABLE IF EXISTS projectactivities;",
        "DROP TABLE IF EXISTS users_integrations;",
        "DROP TABLE IF EXISTS users_links;",
        "DROP TABLE IF EXISTS users_permissions;",
        "DROP TABLE IF EXISTS users_accounts;",
        "DROP TABLE IF EXISTS users_addresses;",
        "DROP TABLE IF EXISTS users_settings;",
        "DROP TABLE IF EXISTS users;"
    ]
};